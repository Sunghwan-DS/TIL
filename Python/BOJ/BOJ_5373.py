# 2020.03.21
# 10:05 ~ 11:33
# 시뮬레이션 구현
# 시간:184ms, 코드 길이:4178B

def rotation(X, dir):
    if dir == '-':
        X[0][0], X[0][1], X[0][2], X[1][2], X[2][2], X[2][1], X[2][0], X[1][0] = X[0][2], X[1][2], X[2][2], X[2][1], X[2][0], X[1][0], X[0][0], X[0][1]
    else:
        X[0][2], X[1][2], X[2][2], X[2][1], X[2][0], X[1][0], X[0][0], X[0][1] = X[0][0], X[0][1], X[0][2], X[1][2], X[2][2], X[2][1], X[2][0], X[1][0]

for tc in range(1, int(input()) + 1):
    N = int(input())
    U = [['w'] * 3 for _ in range(3)]
    D = [['y'] * 3 for _ in range(3)]
    F = [['r'] * 3 for _ in range(3)]
    B = [['o'] * 3 for _ in range(3)]
    L = [['g'] * 3 for _ in range(3)]
    R = [['b'] * 3 for _ in range(3)]

    data = list(input().split())

    for d in data:
        area, dir = d[0], d[1]
        if area == 'F':
            rotation(F, dir)
            if dir == '-':
                L[2][2], L[1][2], L[0][2], U[2][0], U[2][1], U[2][2], R[0][0], R[1][0], R[2][0], D[0][2], D[0][1], D[0][0] = U[2][0], U[2][1], U[2][2], R[0][0], R[1][0], R[2][0], D[0][2], D[0][1], D[0][0], L[2][2], L[1][2], L[0][2]
            else:
                U[2][0], U[2][1], U[2][2], R[0][0], R[1][0], R[2][0], D[0][2], D[0][1], D[0][0], L[2][2], L[1][2], L[0][2] = L[2][2], L[1][2], L[0][2], U[2][0], U[2][1], U[2][2], R[0][0], R[1][0], R[2][0], D[0][2], D[0][1], D[0][0]

        elif area == 'R':
            rotation(R, dir)
            if dir == '-':
                F[2][2], F[1][2], F[0][2], U[2][2], U[1][2], U[0][2], B[0][0], B[1][0], B[2][0], D[2][2], D[1][2], D[0][2] = U[2][2], U[1][2], U[0][2], B[0][0], B[1][0], B[2][0], D[2][2], D[1][2], D[0][2], F[2][2], F[1][2], F[0][2]
            else:
                U[2][2], U[1][2], U[0][2], B[0][0], B[1][0], B[2][0], D[2][2], D[1][2], D[0][2], F[2][2], F[1][2], F[0][2] = F[2][2], F[1][2], F[0][2], U[2][2], U[1][2], U[0][2], B[0][0], B[1][0], B[2][0], D[2][2], D[1][2], D[0][2]

        elif area == 'B':
            rotation(B, dir)
            if dir == '-':
                R[2][2], R[1][2], R[0][2], U[0][2], U[0][1], U[0][0], L[0][0], L[1][0], L[2][0], D[2][0], D[2][1], D[2][2] = U[0][2], U[0][1], U[0][0], L[0][0], L[1][0], L[2][0], D[2][0], D[2][1], D[2][2], R[2][2], R[1][2], R[0][2]
            else:
                U[0][2], U[0][1], U[0][0], L[0][0], L[1][0], L[2][0], D[2][0], D[2][1], D[2][2], R[2][2], R[1][2], R[0][2] = R[2][2], R[1][2], R[0][2], U[0][2], U[0][1], U[0][0], L[0][0], L[1][0], L[2][0], D[2][0], D[2][1], D[2][2]

        elif area == 'L':
            rotation(L, dir)
            if dir == '-':
                B[2][2], B[1][2], B[0][2], U[0][0], U[1][0], U[2][0], F[0][0], F[1][0], F[2][0], D[0][0], D[1][0], D[2][0] = U[0][0], U[1][0], U[2][0], F[0][0], F[1][0], F[2][0], D[0][0], D[1][0], D[2][0], B[2][2], B[1][2], B[0][2]
            else:
                U[0][0], U[1][0], U[2][0], F[0][0], F[1][0], F[2][0], D[0][0], D[1][0], D[2][0], B[2][2], B[1][2], B[0][2] = B[2][2], B[1][2], B[0][2], U[0][0], U[1][0], U[2][0], F[0][0], F[1][0], F[2][0], D[0][0], D[1][0], D[2][0]

        elif area == 'U':
            rotation(U, dir)
            if dir == '-':
                L[0][2], L[0][1], L[0][0], B[0][2], B[0][1], B[0][0], R[0][2], R[0][1], R[0][0], F[0][2], F[0][1], F[0][0] = B[0][2], B[0][1], B[0][0], R[0][2], R[0][1], R[0][0], F[0][2], F[0][1], F[0][0], L[0][2], L[0][1], L[0][0]
            else:
                B[0][2], B[0][1], B[0][0], R[0][2], R[0][1], R[0][0], F[0][2], F[0][1], F[0][0], L[0][2], L[0][1], L[0][0] = L[0][2], L[0][1], L[0][0], B[0][2], B[0][1], B[0][0], R[0][2], R[0][1], R[0][0], F[0][2], F[0][1], F[0][0]

        elif area == 'D':
            rotation(D, dir)
            if dir == '-':
                L[2][0], L[2][1], L[2][2], F[2][0], F[2][1], F[2][2], R[2][0], R[2][1], R[2][2], B[2][0], B[2][1], B[2][2] = F[2][0], F[2][1], F[2][2], R[2][0], R[2][1], R[2][2], B[2][0], B[2][1], B[2][2], L[2][0], L[2][1], L[2][2]
            else:
                F[2][0], F[2][1], F[2][2], R[2][0], R[2][1], R[2][2], B[2][0], B[2][1], B[2][2], L[2][0], L[2][1], L[2][2] = L[2][0], L[2][1], L[2][2], F[2][0], F[2][1], F[2][2], R[2][0], R[2][1], R[2][2], B[2][0], B[2][1], B[2][2]

    for i in range(3):
        print("".join(j for j in U[i]))